#include <unordered_map>
#include <bits/stdc++.h>
#include <iostream>
using namespace std;

typedef std::unordered_map<int, int> t;

const std::unordered_map<int, t> X = {{86, {{7, 86}}}, {84, {{7, 13}}}, {83, {{6, 13}}}, {82, {{6, 20}}}, {81, {{20, 26}}}, {80, {{14, 26}}}, {79, {{0, 14}}}, {78, {{0, 21}}}, {77, {{21, 85}}}, {76, {{10, 20}}}, {75, {{10, 84}}}, {74, {{15, 21}}}, {73, {{15, 83}}}, {72, {{6, 82}}}, {71, {{4, 10}}}, {70, {{4, 81}}}, {69, {{20, 80}}}, {68, {{0, 2}}}, {67, {{2, 79}}}, {66, {{0, 78}}}, {65, {{7, 16}}}, {64, {{16, 77}}}, {63, {{0, 8}}}, {62, {{8, 76}}}, {61, {{15, 75}}}, {60, {{9, 10}}}, {59, {{9, 74}}}, {28, {{16, 49}}}, {27, {{0, 48}}}, {26, {{15, 47}}}, {25, {{2, 46}}}, {24, {{14, 45}}}, {23, {{19, 44}}}, {22, {{16, 43}}}, {21, {{15, 42}}}, {20, {{0, 41}}}, {19, {{15, 40}}}, {18, {{6, 39}}}, {17, {{9, 38}}}, {16, {{24, 37}}}, {15, {{0, 36}}}, {14, {{19, 35}}}, {13, {{6, 34}}}, {0, {{1, 5}}}, {1, {{11, 16}}}, {2, {{0, 17}}}, {3, {{18, 26}}}, {4, {{16, 23}}}, {5, {{22, 25}}}, {6, {{0, 27}}}, {7, {{19, 28}}}, {8, {{6, 29}}}, {9, {{14, 30}}}, {10, {{6, 31}}}, {11, {{14, 32}}}, {12, {{3, 33}}}, {29, {{20, 50}}}, {30, {{3, 51}}}, {31, {{3, 16}}}, {32, {{19, 52}}}, {33, {{15, 19}}}, {34, {{0, 53}}}, {35, {{20, 54}}}, {36, {{2, 55}}}, {37, {{10, 56}}}, {38, {{5, 57}}}, {39, {{0, 5}}}, {40, {{26, 58}}}, {41, {{16, 59}}}, {42, {{22, 60}}}, {43, {{0, 22}}}, {44, {{12, 61}}}, {45, {{12, 15}}}, {46, {{16, 62}}}, {47, {{24, 63}}}, {48, {{0, 24}}}, {49, {{10, 64}}}, {50, {{0, 65}}}, {51, {{2, 66}}}, {52, {{14, 67}}}, {53, {{0, 68}}}, {54, {{20, 69}}}, {55, {{16, 70}}}, {56, {{14, 71}}}, {57, {{6, 72}}}, {58, {{21, 73}}}};
void printTreeEdges(int prufer[], int m)
{
    int n = m + 2;
    std::unordered_map<int, t> tt;
    unordered_map<int, int> d;
    for (int i = 0; i < n; i++)
        d[i] = 1;
    for (int i = 0; i < m; i++)
    {
        int p = prufer[i];
        d[p] += 1;
    }
    int j;
    int i;
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (d[j] == 1) break;
        }
        int p = prufer[i];
        d[p] -= 1;
        d[j] -= 1;
        if (p < j)
        {
            t m;
            m[p] = j;
            tt[i] = m;
        }
        else
        {
            t m;
            m[j] = p;
            tt[i] = m;
        }
    }
    int a = -1, b = -1;
    for (auto x : d) if (x.second == 1) if (a == -1) a = x.first; else b = x.first;
    if (a < b) tt[i + 1] = {{a, b}}; else tt[i + 1] = {{b, a}};
    if (tt == X) cout << "That's correct! just add AlphaCTF{} to it"; else cout << "Nah, try again";
    cout << endl;
}

int main()
{
    string s;
    cout << "Give me the cure's formula: " << endl;
    cin >> s;
    int buff[s.length()];
    int m = int (s[0]);
    for (int i = 0; i < s.length(); i++) {
        buff[i] = int (s[i]);
        if (buff[i] < m) m = buff[i];
    }
    int arrSize = sizeof(buff) / sizeof(buff[0]);
    for (int i = 0; i < arrSize; i++) {
        buff[i] -= m;
    }
    printTreeEdges(buff, arrSize);
    return 0;
}
